<!DOCTYPE html>


<html>

<head>
	<title> Kruskals Algorithm </title>
	<%- include("../partials/header.ejs") %>
	
	<style>
		h1 {
			text-align: center;
			font-weight: 900;
		}
			
		#my_canvas {
			text-align: center;
			border-style: outset;
			border: 5px solid brown;
		}
	</style>
		
	<script type='text/javascript' src='lib/p5.js'></script>
	<script type='text/javascript' src='lib/tools.js'> </script>

</head>

<body>

	<div style='' id='my_canvas'>
	
	</div>

	<script type='text/javascript'>
		document.getElementById("title").innerHTML = "Kruskal's Algorithm";
	
		var screenWidth = screen.availWidth / 1.25;
		var screenHeight = screen.availHeight / 1.5;
		
		var nWidth = 80;
		var nHeight = 80;
		
	
		/*
				25(0) --3---  33(1) 
				|    \           \     
				15      6          7
				|	     \    	   \
				13(2) -2- 4[3] -1- 10[4]
			
		*/
		
		var graph = new Graph();
		
		graph.addNode(25); graph.nodes[0].x = 100; graph.nodes[0].y = 100; //n0
		graph.addNode(33); graph.nodes[1].x = 500; graph.nodes[1].y = 100; //n1
		graph.addNode(13); graph.nodes[2].x = 100; graph.nodes[2].y = 500; //n2
		graph.addNode(4); graph.nodes[3].x = 350; graph.nodes[3].y = 500; //n3
		graph.addNode(10); graph.nodes[4].x = 600; graph.nodes[4].y = 500; //n4
		
		graph.addEdge(0,1,3); //e0
		graph.addEdge(0,2,15); //e1
		graph.addEdge(1,4,7); //e2
		graph.addEdge(2,3,2); //e3
		graph.addEdge(3,4,1); //e4
		graph.addEdge(0,3,6); //e5
		
		
		function find(parent, n){ //finds the parents of each node
			
			if(parent[n] == n){
				return n;
			}
			return find(parent, parent[n]);
		}
		function union(parent, x, y){
			parent[x]
		}
		
		function kruskalsAlgorithm(graph, result){
			//find the MST
			//spanning tree connects all of the vertices in a graph without a cycle
			//the minimum spanning tree is the spanning tree with the lowest total weight
			
			//sort the edges from smallest weight to largest weight
			quickSort(graph.edges, 0, graph.edges.length - 1, (a, j, i) => {
				return a[j].weight < a[i].weight;
			});
			var parent = new Array(graph.nodes.length);
			
			for(let i = 0; i < graph.nodes.length; i++){
				parent[i] = i;
			}
			
			
			for(let i = 0; i < graph.edges.length; i++){
				let e = graph.edges[i];
				let x = find(parent, e.src);
				let y = find(parent, e.dest);
				if(x != y){
					result.push(e);
					parent[x] = y; //union
				}
			}
			
		}
		var mst = [];
		kruskalsAlgorithm(graph, mst);
		console.log(graph);
		
		
		
		function setup(){
			var myCanvas = createCanvas(screenWidth, screenHeight);
			myCanvas.parent("my_canvas");
		}
		function draw(){
			background(200);
			textAlign(CENTER, CENTER);
			
			for(let i = 0; i < graph.edges.length; i++){
				 let e = graph.edges[i]; 
				 if(mst.includes(e)){
					stroke(color(255, 0, 0));
				 }else{
					stroke(0);
				 }
				 let srcNode = graph.nodes[e.src];
				 let destNode = graph.nodes[e.dest];
				 strokeWeight(4);
				 line(srcNode.x, srcNode.y, destNode.x, destNode.y);
				 
				 let midX = (destNode.x - srcNode.x) / 2 + srcNode.x;
				 let midY = (destNode.y - srcNode.y) / 2 + srcNode.y;
				
				 strokeWeight(1);
				 stroke(0);
				 textSize(16);
				 ellipse(midX, midY, 40, 40);
				 text(e.weight, midX, midY);
			}
			
			strokeWeight(1);
			textSize(32);

			for(let i = 0; i < graph.nodes.length; i++){
				let n = graph.nodes[i];
				ellipse(n.x, n.y, nWidth, nHeight);
				text(n.value, n.x, n.y);
			}
			
			
		}
		
		
	</script>
</body>

</html> 